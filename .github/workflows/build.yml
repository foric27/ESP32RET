name: Сборка и выпуск проекта ESP32RET

# Указываем, когда запускать процесс: при push в любую ветку или при ручном запуске
on:
  push:
    branches:
      - '*' # Запуск при push в любую ветку
  workflow_dispatch: # Позволяет запускать вручную из вкладки Actions

# Определяем задачу (job) для сборки и выпуска
jobs:
  build-and-release:
    name: Компиляция и создание релиза для ESP32
    runs-on: ubuntu-latest # Используем последнюю версию Ubuntu

    steps:
      # Шаг 1: Клонируем репозиторий проекта
      - name: Клонирование репозитория ESP32RET
        uses: actions/checkout@v4

      # Шаг 2: Установка Arduino-CLI
      - name: Установка Arduino-CLI
        uses: arduino/setup-arduino-cli@v1

      # Шаг 3: Установка ядра ESP32
      - name: Установка ядра ESP32
        run: |
          arduino-cli core update-index
          arduino-cli core install esp32:esp32

      # Шаг 4: Загрузка и установка библиотеки esp32_can
      - name: Установка библиотеки esp32_can
        run: |
          git clone https://github.com/collin80/esp32_can.git ~/Arduino/libraries/esp32_can
          echo "Библиотека esp32_can установлена"

      # Шаг 5: Загрузка и установка библиотеки esp32_mcp2517fd
      - name: Установка библиотеки esp32_mcp2517fd
        run: |
          git clone https://github.com/collin80/esp32_mcp2517fd.git ~/Arduino/libraries/esp32_mcp2517fd
          echo "Библиотека esp32_mcp2517fd установлена"

      # Шаг 6: Загрузка и установка библиотеки can_common
      - name: Установка библиотеки can_common
        run: |
          git clone https://github.com/collin80/can_common.git ~/Arduino/libraries/can_common
          echo "Библиотека can_common установлена"

      # Шаг 7: Установка библиотеки FastLED
      - name: Установка библиотеки FastLED
        run: |
          arduino-cli lib install FastLED
          echo "Библиотека FastLED установлена"

      # Шаг 8: Компиляция проекта
      - name: Компиляция прошивки
        run: |
          arduino-cli compile \
            --fqbn esp32:esp32:esp32:PartitionScheme=min_spiffs \
            --build-path ./build \
            ./ESP32RET.ino

      # Шаг 9: Получение версии из commit hash
      - name: Определение версии релиза
        id: version
        run: |
          echo "RELEASE_VERSION=build-${{ github.sha }}" >> $GITHUB_ENV

      # Шаг 10: Создание релиза и загрузка прошивки
      - name: Создание релиза с прошивкой
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          name: "Сборка ${{ env.RELEASE_VERSION }}"
          body: "Автоматическая сборка прошивки ESP32RET от ${{ github.event.head_commit.message }}"
          files: ./build/ESP32RET.ino.bin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}